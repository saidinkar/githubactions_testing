{"name": "Power bi comparison with sql", "status": "failed", "statusDetails": {"message": "Failed: fixture function has more than one 'yield':\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def on_failure(request, shell,get_browser):\n        yield\n        global driver\n        if get_browser == \"chrome\":\n            chrome_options = Options()\n            chrome_options.add_argument(\"--start-maximized\")\n            driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        elif get_browser == \"firefox\":\n            driver = webdriver.Firefox(GeckoDriverManager().install())\n        elif get_browser == \"headless\":\n            chrome_options = Options()\n            # chrome_options.add_argument(\"--disable-extensions\")\n            # chrome_options.add_argument(\"--disable-gpu\")\n            # chrome_options.add_argument(\"--no-sandbox\") # linux only\n            chrome_options.add_argument(\"--headless\")\n            driver = webdriver.Chrome(ChromeDriverManager().install(), options=chrome_options)\n        else:\n            print(\"Driver not supported\")\n        driver.implicitly_wait(10)\n        # Add in here each page from the POM in order to initialize the driver for each one.\n        yield driver\n    \n        logs = shell.driver.execute('getLog', {'type': 'browser'})\n    \n        if hasattr(request.node, \"rep_fail\"):\n            if request.node.rep_fail is True:\n                try:\n                    log_file_path = os.path.join(\n                        BROWSER_LOGS_DIR,\n                        \"{}.json\".format(get_file_name(request))\n                    )\n                    with open(log_file_path, \"w\") as log_file:\n                        json.dump(logs, log_file)\n    \n                    shell.driver.get_screenshot_as_file(\n                        os.path.join(SCREENSHOTS_DIR, \"{}.png\".format(get_file_name(request)))\n                    )\n                    allure.attach(shell.driver.get_screenshot_as_png(), name=\"{}.png\".format(get_file_name(request)),\n                                  attachment_type=AttachmentType.PNG)\n                    allure.attach.file(source=log_file_path, name=\"{}.json\".format(get_file_name(request)),\n                                       attachment_type=AttachmentType.JSON)\n    \n                finally:\n                    shell.reset()\nD:\\PyTest-Automation-Framework-master\\tests\\conftest.py:120", "trace": "fixture function has more than one 'yield':\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def on_failure(request, shell,get_browser):\n        yield\n        global driver\n        if get_browser == \"chrome\":\n            chrome_options = Options()\n            chrome_options.add_argument(\"--start-maximized\")\n            driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        elif get_browser == \"firefox\":\n            driver = webdriver.Firefox(GeckoDriverManager().install())\n        elif get_browser == \"headless\":\n            chrome_options = Options()\n            # chrome_options.add_argument(\"--disable-extensions\")\n            # chrome_options.add_argument(\"--disable-gpu\")\n            # chrome_options.add_argument(\"--no-sandbox\") # linux only\n            chrome_options.add_argument(\"--headless\")\n            driver = webdriver.Chrome(ChromeDriverManager().install(), options=chrome_options)\n        else:\n            print(\"Driver not supported\")\n        driver.implicitly_wait(10)\n        # Add in here each page from the POM in order to initialize the driver for each one.\n        yield driver\n    \n        logs = shell.driver.execute('getLog', {'type': 'browser'})\n    \n        if hasattr(request.node, \"rep_fail\"):\n            if request.node.rep_fail is True:\n                try:\n                    log_file_path = os.path.join(\n                        BROWSER_LOGS_DIR,\n                        \"{}.json\".format(get_file_name(request))\n                    )\n                    with open(log_file_path, \"w\") as log_file:\n                        json.dump(logs, log_file)\n    \n                    shell.driver.get_screenshot_as_file(\n                        os.path.join(SCREENSHOTS_DIR, \"{}.png\".format(get_file_name(request)))\n                    )\n                    allure.attach(shell.driver.get_screenshot_as_png(), name=\"{}.png\".format(get_file_name(request)),\n                                  attachment_type=AttachmentType.PNG)\n                    allure.attach.file(source=log_file_path, name=\"{}.json\".format(get_file_name(request)),\n                                       attachment_type=AttachmentType.JSON)\n    \n                finally:\n                    shell.reset()\nD:\\PyTest-Automation-Framework-master\\tests\\conftest.py:120"}, "steps": [{"name": "Login into power bi using id", "status": "passed", "start": 1688716804271, "stop": 1688716804499}, {"name": "Login into power bi using encrypted password", "status": "passed", "start": 1688716809514, "stop": 1688716810157}, {"name": "Clicked the extra pop up in login screen", "status": "passed", "start": 1688716815160, "stop": 1688716815541}, {"name": "Reset Filter", "status": "passed", "start": 1688716860545, "stop": 1688716861907}, {"name": "Filter the power bi based on filter options", "status": "passed", "start": 1688716867596, "stop": 1688716884617}, {"name": "Reset Filter", "status": "passed", "start": 1688716929622, "stop": 1688716930402}, {"name": "Validate Total spend by sector bar graph against SQL", "status": "passed", "start": 1688716930402, "stop": 1688716931169}], "attachments": [{"name": "log", "source": "0696c97f-7b46-488e-9d3a-28d19a670b7b-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "8ef074eb-ad19-44fb-b72f-6bdda0135e8e-attachment.txt", "type": "text/plain"}], "start": 1688716784252, "stop": 1688716931169, "uuid": "7bfec97c-656e-42b8-a935-db15e2d1dd3c", "historyId": "b0336c530c443842ce6471649281d16f", "testCaseId": "52ed46f92fc8742b817ccd38918a09bf", "fullName": "tests.test_openPowerBI.TestPowerBIReport#test_report", "labels": [{"name": "tag", "value": "smoke"}, {"name": "tag", "value": "@pytest.mark.usefixtures('get_driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_openPowerBI"}, {"name": "subSuite", "value": "TestPowerBIReport"}, {"name": "host", "value": "TIGER03699"}, {"name": "thread", "value": "32728-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_openPowerBI"}]}