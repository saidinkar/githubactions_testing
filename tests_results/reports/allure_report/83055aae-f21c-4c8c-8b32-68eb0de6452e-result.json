{"name": "Power bi comparison with sql", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0036A813+48355]\n\t(No symbol) [0x002FC4B1]\n\t(No symbol) [0x00205358]\n\t(No symbol) [0x001ED293]\n\t(No symbol) [0x0024E37B]\n\t(No symbol) [0x0025C473]\n\t(No symbol) [0x0024A536]\n\t(No symbol) [0x002282DC]\n\t(No symbol) [0x002293DD]\n\tGetHandleVerifier [0x005CAABD+2539405]\n\tGetHandleVerifier [0x0060A78F+2800735]\n\tGetHandleVerifier [0x0060456C+2775612]\n\tGetHandleVerifier [0x003F51E0+616112]\n\t(No symbol) [0x00305F8C]\n\t(No symbol) [0x00302328]\n\t(No symbol) [0x0030240B]\n\t(No symbol) [0x002F4FF7]\n\tBaseThreadInitThunk [0x77347D59+25]\n\tRtlInitializeExceptionChain [0x77CEB74B+107]\n\tRtlClearBits [0x77CEB6CF+191]", "trace": "self = <tests.test_openPowerBI.TestPowerBIReport object at 0x00000254E9573910>\n\n    @pytest.mark.smoke\n    @allure.title(\"Power bi comparison with sql\")\n    def test_report(self):\n>       self.OpenPowerBI.power_BI_login(emailID, decode(encryptedPasscode))\n\ntests\\test_openPowerBI.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pom\\pages\\openpowerbi_page.py:29: in power_BI_login\n    if len(self.find_elements_by_xpath(self.emailID))>0:\nsrc\\pom\\pages\\base_page.py:30: in find_elements_by_xpath\n    return self.driver.find_elements('xpath', locator)\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:890: in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000254E9573D90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x77347D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77CEB74B+107]\\\\n\\\\tRtlClearBits [0x77CEB6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0036A813+48355]\nE       \t(No symbol) [0x002FC4B1]\nE       \t(No symbol) [0x00205358]\nE       \t(No symbol) [0x001ED293]\nE       \t(No symbol) [0x0024E37B]\nE       \t(No symbol) [0x0025C473]\nE       \t(No symbol) [0x0024A536]\nE       \t(No symbol) [0x002282DC]\nE       \t(No symbol) [0x002293DD]\nE       \tGetHandleVerifier [0x005CAABD+2539405]\nE       \tGetHandleVerifier [0x0060A78F+2800735]\nE       \tGetHandleVerifier [0x0060456C+2775612]\nE       \tGetHandleVerifier [0x003F51E0+616112]\nE       \t(No symbol) [0x00305F8C]\nE       \t(No symbol) [0x00302328]\nE       \t(No symbol) [0x0030240B]\nE       \t(No symbol) [0x002F4FF7]\nE       \tBaseThreadInitThunk [0x77347D59+25]\nE       \tRtlInitializeExceptionChain [0x77CEB74B+107]\nE       \tRtlClearBits [0x77CEB6CF+191]\n\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchWindowException"}, "attachments": [{"name": "stderr", "source": "2bbec8e0-cc43-413e-8cc2-6703036712d3-attachment.txt", "type": "text/plain"}], "start": 1689184749844, "stop": 1689184759850, "uuid": "a95f4d4d-2423-440d-9e4e-e368a2a1aebf", "historyId": "b0336c530c443842ce6471649281d16f", "testCaseId": "52ed46f92fc8742b817ccd38918a09bf", "fullName": "tests.test_openPowerBI.TestPowerBIReport#test_report", "labels": [{"name": "tag", "value": "smoke"}, {"name": "tag", "value": "@pytest.mark.usefixtures('get_driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_openPowerBI"}, {"name": "subSuite", "value": "TestPowerBIReport"}, {"name": "host", "value": "TIGER03699"}, {"name": "thread", "value": "25684-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_openPowerBI"}]}