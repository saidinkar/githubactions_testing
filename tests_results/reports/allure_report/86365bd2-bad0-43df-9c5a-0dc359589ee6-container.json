{"uuid": "71cb1d7f-3544-4af6-9642-f1bee01d04c0", "children": ["7bfec97c-656e-42b8-a935-db15e2d1dd3c"], "befores": [{"name": "on_failure", "status": "passed", "start": 1688716779885, "stop": 1688716779885}], "afters": [{"name": "on_failure::0", "status": "failed", "statusDetails": {"message": "Failed: fixture function has more than one 'yield':\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def on_failure(request, shell,get_browser):\n        yield\n        global driver\n        if get_browser == \"chrome\":\n            chrome_options = Options()\n            chrome_options.add_argument(\"--start-maximized\")\n            driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        elif get_browser == \"firefox\":\n            driver = webdriver.Firefox(GeckoDriverManager().install())\n        elif get_browser == \"headless\":\n            chrome_options = Options()\n            # chrome_options.add_argument(\"--disable-extensions\")\n            # chrome_options.add_argument(\"--disable-gpu\")\n            # chrome_options.add_argument(\"--no-sandbox\") # linux only\n            chrome_options.add_argument(\"--headless\")\n            driver = webdriver.Chrome(ChromeDriverManager().install(), options=chrome_options)\n        else:\n            print(\"Driver not supported\")\n        driver.implicitly_wait(10)\n        # Add in here each page from the POM in order to initialize the driver for each one.\n        yield driver\n    \n        logs = shell.driver.execute('getLog', {'type': 'browser'})\n    \n        if hasattr(request.node, \"rep_fail\"):\n            if request.node.rep_fail is True:\n                try:\n                    log_file_path = os.path.join(\n                        BROWSER_LOGS_DIR,\n                        \"{}.json\".format(get_file_name(request))\n                    )\n                    with open(log_file_path, \"w\") as log_file:\n                        json.dump(logs, log_file)\n    \n                    shell.driver.get_screenshot_as_file(\n                        os.path.join(SCREENSHOTS_DIR, \"{}.png\".format(get_file_name(request)))\n                    )\n                    allure.attach(shell.driver.get_screenshot_as_png(), name=\"{}.png\".format(get_file_name(request)),\n                                  attachment_type=AttachmentType.PNG)\n                    allure.attach.file(source=log_file_path, name=\"{}.json\".format(get_file_name(request)),\n                                       attachment_type=AttachmentType.JSON)\n    \n                finally:\n                    shell.reset()\nD:\\PyTest-Automation-Framework-master\\tests\\conftest.py:120\n", "trace": "  File \"C:\\Users\\vaishnavi.gopala\\PycharmProjects\\MarsInstaShop\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"C:\\Users\\vaishnavi.gopala\\PycharmProjects\\MarsInstaShop\\venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 920, in _teardown_yield_fixture\n    fail_fixturefunc(fixturefunc, \"fixture function has more than one 'yield'\")\n  File \"C:\\Users\\vaishnavi.gopala\\PycharmProjects\\MarsInstaShop\\venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 888, in fail_fixturefunc\n    fail(msg + \":\\n\\n\" + str(source.indent()) + \"\\n\" + location, pytrace=False)\n  File \"C:\\Users\\vaishnavi.gopala\\PycharmProjects\\MarsInstaShop\\venv\\lib\\site-packages\\_pytest\\outcomes.py\", line 194, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "start": 1688716933409, "stop": 1688716935484}], "start": 1688716779885, "stop": 1688716935484}