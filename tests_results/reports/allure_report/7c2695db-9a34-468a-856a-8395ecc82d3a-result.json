{"name": "Power bi comparison with sql", "status": "broken", "statusDetails": {"message": "TypeError: catching classes that do not inherit from BaseException is not allowed", "trace": "self = <src.pom.pages.samplepowerbi_page.SummaryReportPage object at 0x000001965CB104F0>, locator = \"(//*[local-name()='div' and @class='slicer-restatement'])[1]\"\n\n    def click_xpath(self, locator):\n        try:\n>           return self.find_element_by_xpath(locator).click()\n\nsrc\\pom\\pages\\base_page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"90ce905e4e10e59f476b7d1b56673e7e\", element=\"70B54C709208BA73DB29B6DE66501CD3_element_3\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"90ce905e4e10e59f476b7d1b56673e7e\", element=\"70B54C709208BA73DB29B6DE66501CD3_element_3\")>, command = 'clickElement'\nparams = {'id': '70B54C709208BA73DB29B6DE66501CD3_element_3', 'sessionId': '90ce905e4e10e59f476b7d1b56673e7e'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"90ce905e4e10e59f476b7d1b56673e7e\")>, driver_command = 'clickElement'\nparams = {'id': '70B54C709208BA73DB29B6DE66501CD3_element_3'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001965CA73CD0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...dInitThunk [0x77347D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77CEB74B+107]\\\\n\\\\tRtlClearBits [0x77CEB6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00FFA813+48355]\nE       \t(No symbol) [0x00F8C4B1]\nE       \t(No symbol) [0x00E95220]\nE       \t(No symbol) [0x00EC1846]\nE       \t(No symbol) [0x00EB9F5C]\nE       \t(No symbol) [0x00EDA73C]\nE       \t(No symbol) [0x00EB9A36]\nE       \t(No symbol) [0x00EDAA94]\nE       \t(No symbol) [0x00EEC922]\nE       \t(No symbol) [0x00EDA536]\nE       \t(No symbol) [0x00EB82DC]\nE       \t(No symbol) [0x00EB93DD]\nE       \tGetHandleVerifier [0x0125AABD+2539405]\nE       \tGetHandleVerifier [0x0129A78F+2800735]\nE       \tGetHandleVerifier [0x0129456C+2775612]\nE       \tGetHandleVerifier [0x010851E0+616112]\nE       \t(No symbol) [0x00F95F8C]\nE       \t(No symbol) [0x00F92328]\nE       \t(No symbol) [0x00F9240B]\nE       \t(No symbol) [0x00F84FF7]\nE       \tBaseThreadInitThunk [0x77347D59+25]\nE       \tRtlInitializeExceptionChain [0x77CEB74B+107]\nE       \tRtlClearBits [0x77CEB6CF+191]\n\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_openPowerBI.TestPowerBIReport object at 0x000001965CA73850>\n\n    @pytest.mark.smoke\n    @allure.title(\"Power bi comparison with sql\")\n    def test_report(self):\n        self.OpenPowerBI.power_BI_login(emailID, decode(encryptedPasscode))\n        self.summaryReport.reset_Filter_Report()\n>       self.summaryReport.filter_Select_Report(td.test_data(\"filter1\"), td.test_data(\"filter2\"), td.test_data(\"filter3\"), td.test_data(\"filter4\"), td.test_data(\"filter5\"), td.test_data(\"filter6\"))\n\ntests\\test_openPowerBI.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pom\\pages\\samplepowerbi_page.py:47: in filter_Select_Report\n    self.click_xpath(self.yearDropDown)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.pom.pages.samplepowerbi_page.SummaryReportPage object at 0x000001965CB104F0>, locator = \"(//*[local-name()='div' and @class='slicer-restatement'])[1]\"\n\n    def click_xpath(self, locator):\n        try:\n            return self.find_element_by_xpath(locator).click()\n>       except ElementNotVisibleException(locator) as E:\nE       TypeError: catching classes that do not inherit from BaseException is not allowed\n\nsrc\\pom\\pages\\base_page.py:44: TypeError"}, "steps": [{"name": "Login into power bi using id", "status": "passed", "start": 1689848764205, "stop": 1689848764602}, {"name": "Login into power bi using encrypted password", "status": "passed", "start": 1689848769617, "stop": 1689848770734}, {"name": "Clicked the extra pop up in login screen", "status": "passed", "start": 1689848775749, "stop": 1689848776298}, {"name": "Reset Filter", "status": "passed", "start": 1689848821305, "stop": 1689848826703}, {"name": "Filter the power bi based on filter options", "status": "broken", "statusDetails": {"message": "TypeError: catching classes that do not inherit from BaseException is not allowed\n", "trace": "  File \"D:\\PyTest-Automation-Framework-master\\src\\pom\\pages\\samplepowerbi_page.py\", line 47, in filter_Select_Report\n    self.click_xpath(self.yearDropDown)\n  File \"D:\\PyTest-Automation-Framework-master\\src\\pom\\pages\\base_page.py\", line 44, in click_xpath\n    except ElementNotVisibleException(locator) as E:\n"}, "start": 1689848832366, "stop": 1689848842490}], "attachments": [{"name": "log", "source": "b9ed3c31-23ad-4978-84bd-5e892fcee8c9-attachment.txt", "type": "text/plain"}], "start": 1689848744116, "stop": 1689848842506, "uuid": "a4856b95-e648-401a-aeba-275cf1f4b7af", "historyId": "b0336c530c443842ce6471649281d16f", "testCaseId": "52ed46f92fc8742b817ccd38918a09bf", "fullName": "tests.test_openPowerBI.TestPowerBIReport#test_report", "labels": [{"name": "tag", "value": "smoke"}, {"name": "tag", "value": "@pytest.mark.usefixtures('get_driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_openPowerBI"}, {"name": "subSuite", "value": "TestPowerBIReport"}, {"name": "host", "value": "TIGER03699"}, {"name": "thread", "value": "37128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_openPowerBI"}]}