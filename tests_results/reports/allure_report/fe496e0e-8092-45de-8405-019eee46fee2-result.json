{"name": "Power bi comparison with sql", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=114.0.5735.248)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x004AA813+48355]\n\t(No symbol) [0x0043C4B1]\n\t(No symbol) [0x00345358]\n\t(No symbol) [0x00370A9F]\n\t(No symbol) [0x00370B3B]\n\t(No symbol) [0x0039E232]\n\t(No symbol) [0x0038A784]\n\t(No symbol) [0x0039C922]\n\t(No symbol) [0x0038A536]\n\t(No symbol) [0x003682DC]\n\t(No symbol) [0x003693DD]\n\tGetHandleVerifier [0x0070AABD+2539405]\n\tGetHandleVerifier [0x0074A78F+2800735]\n\tGetHandleVerifier [0x0074456C+2775612]\n\tGetHandleVerifier [0x005351E0+616112]\n\t(No symbol) [0x00445F8C]\n\t(No symbol) [0x00442328]\n\t(No symbol) [0x0044240B]\n\t(No symbol) [0x00434FF7]\n\tBaseThreadInitThunk [0x75B07D59+25]\n\tRtlInitializeExceptionChain [0x7781B79B+107]\n\tRtlClearBits [0x7781B71F+191]", "trace": "self = <tests.test_openPowerBI.TestPowerBIReport object at 0x00000219FF8731F0>\n\n    @pytest.mark.smoke\n    @allure.title(\"Power bi comparison with sql\")\n    def test_report(self):\n        self.OpenPowerBI.power_BI_login(emailID, decode(encryptedPasscode))\n        self.summaryReport.reset_Filter_Report()\n>       self.summaryReport.validate_test()\n\ntests\\test_openPowerBI.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pom\\pages\\samplepowerbi_page.py:75: in validate_test\n    self.find_element_by_xpath_new(self.newXpath)\nsrc\\pom\\pages\\base_page.py:40: in find_element_by_xpath_new\n    return self.driver.find_element(locator)\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:857: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000219FF8728F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...dInitThunk [0x75B07D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7781B79B+107]\\\\n\\\\tRtlClearBits [0x7781B71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=114.0.5735.248)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x004AA813+48355]\nE       \t(No symbol) [0x0043C4B1]\nE       \t(No symbol) [0x00345358]\nE       \t(No symbol) [0x00370A9F]\nE       \t(No symbol) [0x00370B3B]\nE       \t(No symbol) [0x0039E232]\nE       \t(No symbol) [0x0038A784]\nE       \t(No symbol) [0x0039C922]\nE       \t(No symbol) [0x0038A536]\nE       \t(No symbol) [0x003682DC]\nE       \t(No symbol) [0x003693DD]\nE       \tGetHandleVerifier [0x0070AABD+2539405]\nE       \tGetHandleVerifier [0x0074A78F+2800735]\nE       \tGetHandleVerifier [0x0074456C+2775612]\nE       \tGetHandleVerifier [0x005351E0+616112]\nE       \t(No symbol) [0x00445F8C]\nE       \t(No symbol) [0x00442328]\nE       \t(No symbol) [0x0044240B]\nE       \t(No symbol) [0x00434FF7]\nE       \tBaseThreadInitThunk [0x75B07D59+25]\nE       \tRtlInitializeExceptionChain [0x7781B79B+107]\nE       \tRtlClearBits [0x7781B71F+191]\n\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: InvalidArgumentException"}, "steps": [{"name": "Login into power bi using id", "status": "passed", "start": 1690126785446, "stop": 1690126785699}, {"name": "Login into power bi using encrypted password", "status": "passed", "start": 1690126790713, "stop": 1690126791855}, {"name": "Clicked the extra pop up in login screen", "status": "passed", "start": 1690126796858, "stop": 1690126797293}, {"name": "Reset Filter", "status": "passed", "start": 1690126842306, "stop": 1690126843250}, {"name": "Test Test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=114.0.5735.248)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x004AA813+48355]\n\t(No symbol) [0x0043C4B1]\n\t(No symbol) [0x00345358]\n\t(No symbol) [0x00370A9F]\n\t(No symbol) [0x00370B3B]\n\t(No symbol) [0x0039E232]\n\t(No symbol) [0x0038A784]\n\t(No symbol) [0x0039C922]\n\t(No symbol) [0x0038A536]\n\t(No symbol) [0x003682DC]\n\t(No symbol) [0x003693DD]\n\tGetHandleVerifier [0x0070AABD+2539405]\n\tGetHandleVerifier [0x0074A78F+2800735]\n\tGetHandleVerifier [0x0074456C+2775612]\n\tGetHandleVerifier [0x005351E0+616112]\n\t(No symbol) [0x00445F8C]\n\t(No symbol) [0x00442328]\n\t(No symbol) [0x0044240B]\n\t(No symbol) [0x00434FF7]\n\tBaseThreadInitThunk [0x75B07D59+25]\n\tRtlInitializeExceptionChain [0x7781B79B+107]\n\tRtlClearBits [0x7781B71F+191]\n\n", "trace": "  File \"D:\\PyTest-Automation-Framework-master\\src\\pom\\pages\\samplepowerbi_page.py\", line 75, in validate_test\n    self.find_element_by_xpath_new(self.newXpath)\n  File \"D:\\PyTest-Automation-Framework-master\\src\\pom\\pages\\base_page.py\", line 40, in find_element_by_xpath_new\n    return self.driver.find_element(locator)\n  File \"C:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 857, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n  File \"C:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 435, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1690126843250, "stop": 1690126843290}], "attachments": [{"name": "log", "source": "b31ff74c-ab05-46cd-814c-0b9f6aab1144-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "711f4a75-52d6-4ef3-b493-9fc5ea365f6a-attachment.txt", "type": "text/plain"}], "start": 1690126775424, "stop": 1690126843301, "uuid": "8d625f5b-7c0b-4d7f-830b-a8fc78ff8ef6", "historyId": "b0336c530c443842ce6471649281d16f", "testCaseId": "52ed46f92fc8742b817ccd38918a09bf", "fullName": "tests.test_openPowerBI.TestPowerBIReport#test_report", "labels": [{"name": "tag", "value": "smoke"}, {"name": "tag", "value": "@pytest.mark.usefixtures('get_driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_openPowerBI"}, {"name": "subSuite", "value": "TestPowerBIReport"}, {"name": "host", "value": "TIGER03699"}, {"name": "thread", "value": "22776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_openPowerBI"}]}