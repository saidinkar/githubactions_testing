{"name": "Power bi comparison with sql", "status": "broken", "statusDetails": {"message": "ValueError: Can only compare identically-labeled DataFrame objects", "trace": "self = <tests.test_openPowerBI.TestPowerBIReport object at 0x000002AD44CA3610>\n\n    @pytest.mark.smoke\n    @allure.title(\"Power bi comparison with sql\")\n    def test_report(self):\n        self.OpenPowerBI.power_BI_login(emailID, decode(encryptedPasscode))\n        self.summaryReport.reset_Filter_Report()\n        self.summaryReport.filter_Select_Report(td.test_data(\"filter1\"), td.test_data(\"filter2\"), td.test_data(\"filter3\"), td.test_data(\"filter4\"), td.test_data(\"filter5\"), td.test_data(\"filter6\"))\n        self.summaryReport.reset_Filter_Report()\n        self.summaryReport.validate_Total_Spend_By_Sector()\n        self.summaryReport.validate_Total_Sensitivity_By_sector()\n>       self.summaryReport.validate_Total_Spend_By_SectorPriorYear()\n\ntests\\test_openPowerBI.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pom\\pages\\samplepowerbi_page.py:118: in validate_Total_Spend_By_SectorPriorYear\n    dfFinalCompare = dfprior.compare(dfcheck2, keep_equal=True)\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\frame.py:7199: in compare\n    return super().compare(\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\generic.py:8642: in compare\n    mask = ~((self == other) | (self.isna() & other.isna()))\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\ops\\common.py:70: in new_method\n    return method(self, other)\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\arraylike.py:40: in __eq__\n    return self._cmp_method(other, operator.eq)\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\frame.py:6937: in _cmp_method\n    self, other = ops.align_method_FRAME(self, other, axis, flex=False, level=None)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nleft =    SectorPriorYear        Spend\n0       6964081936         FLNA\n1       1280736010          NAB\n2         79093294    ...  26369005        AMESA\n5       -214670118         QFNA\n6       -231950408         APAC\n7       -981077710  CASA/Brazil\nright =         Sector  SpendPriorYear\n0         FLNA      6964081936\n1          NAB      1280736010\n2       Mexico        790...     AMESA        26369005\n5         QFNA      -214670118\n6         APAC      -231950408\n7  CASA/Brazil      -981077710\naxis = 1, flex = False, level = None\n\n    def align_method_FRAME(\n        left, right, axis, flex: bool | None = False, level: Level = None\n    ):\n        \"\"\"\n        Convert rhs to meet lhs dims if input is list, tuple or np.ndarray.\n    \n        Parameters\n        ----------\n        left : DataFrame\n        right : Any\n        axis : int, str, or None\n        flex : bool or None, default False\n            Whether this is a flex op, in which case we reindex.\n            None indicates not to check for alignment.\n        level : int or level name, default None\n    \n        Returns\n        -------\n        left : DataFrame\n        right : Any\n        \"\"\"\n    \n        def to_series(right):\n            msg = \"Unable to coerce to Series, length must be {req_len}: given {given_len}\"\n            if axis is not None and left._get_axis_name(axis) == \"index\":\n                if len(left.index) != len(right):\n                    raise ValueError(\n                        msg.format(req_len=len(left.index), given_len=len(right))\n                    )\n                right = left._constructor_sliced(right, index=left.index)\n            else:\n                if len(left.columns) != len(right):\n                    raise ValueError(\n                        msg.format(req_len=len(left.columns), given_len=len(right))\n                    )\n                right = left._constructor_sliced(right, index=left.columns)\n            return right\n    \n        if isinstance(right, np.ndarray):\n    \n            if right.ndim == 1:\n                right = to_series(right)\n    \n            elif right.ndim == 2:\n                if right.shape == left.shape:\n                    right = left._constructor(right, index=left.index, columns=left.columns)\n    \n                elif right.shape[0] == left.shape[0] and right.shape[1] == 1:\n                    # Broadcast across columns\n                    right = np.broadcast_to(right, left.shape)\n                    right = left._constructor(right, index=left.index, columns=left.columns)\n    \n                elif right.shape[1] == left.shape[1] and right.shape[0] == 1:\n                    # Broadcast along rows\n                    right = to_series(right[0, :])\n    \n                else:\n                    raise ValueError(\n                        \"Unable to coerce to DataFrame, shape \"\n                        f\"must be {left.shape}: given {right.shape}\"\n                    )\n    \n            elif right.ndim > 2:\n                raise ValueError(\n                    \"Unable to coerce to Series/DataFrame, \"\n                    f\"dimension must be <= 2: {right.shape}\"\n                )\n    \n        elif is_list_like(right) and not isinstance(right, (ABCSeries, ABCDataFrame)):\n            # GH 36702. Raise when attempting arithmetic with list of array-like.\n            if any(is_array_like(el) for el in right):\n                raise ValueError(\n                    f\"Unable to coerce list of {type(right[0])} to Series/DataFrame\"\n                )\n            # GH17901\n            right = to_series(right)\n    \n        if flex is not None and isinstance(right, ABCDataFrame):\n            if not left._indexed_same(right):\n                if flex:\n                    left, right = left.align(right, join=\"outer\", level=level, copy=False)\n                else:\n>                   raise ValueError(\n                        \"Can only compare identically-labeled DataFrame objects\"\nE                       ValueError: Can only compare identically-labeled DataFrame objects\n\nC:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\ops\\__init__.py:289: ValueError"}, "steps": [{"name": "Login into power bi using id", "status": "passed", "start": 1688836078527, "stop": 1688836078807}, {"name": "Login into power bi using encrypted password", "status": "passed", "start": 1688836083810, "stop": 1688836084742}, {"name": "Clicked the extra pop up in login screen", "status": "passed", "start": 1688836089745, "stop": 1688836090155}, {"name": "Reset Filter", "status": "passed", "start": 1688836135162, "stop": 1688836136104}, {"name": "Filter the power bi based on filter options", "status": "passed", "start": 1688836142054, "stop": 1688836159245}, {"name": "Reset Filter", "status": "passed", "start": 1688836204249, "stop": 1688836205116}, {"name": "Validate Total spend by sector bar graph against SQL", "status": "passed", "start": 1688836205123, "stop": 1688836206292}, {"name": "validate_Total_Sensitivity_By_sector bar graph against SQL", "status": "passed", "start": 1688836206292, "stop": 1688836207155}, {"name": "validate_Total_Spend_By_SectorPriorYear bar graph against SQL", "status": "broken", "statusDetails": {"message": "ValueError: Can only compare identically-labeled DataFrame objects\n", "trace": "  File \"D:\\PyTest-Automation-Framework-master\\src\\pom\\pages\\samplepowerbi_page.py\", line 118, in validate_Total_Spend_By_SectorPriorYear\n    dfFinalCompare = dfprior.compare(dfcheck2, keep_equal=True)\n  File \"C:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\frame.py\", line 7199, in compare\n    return super().compare(\n  File \"C:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\generic.py\", line 8642, in compare\n    mask = ~((self == other) | (self.isna() & other.isna()))\n  File \"C:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\ops\\common.py\", line 70, in new_method\n    return method(self, other)\n  File \"C:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\arraylike.py\", line 40, in __eq__\n    return self._cmp_method(other, operator.eq)\n  File \"C:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\frame.py\", line 6937, in _cmp_method\n    self, other = ops.align_method_FRAME(self, other, axis, flex=False, level=None)\n  File \"C:\\Users\\vaishnavi.gopala\\Pepsico\\Pepsico-CV_QA_Automation\\venv\\lib\\site-packages\\pandas\\core\\ops\\__init__.py\", line 289, in align_method_FRAME\n    raise ValueError(\n"}, "start": 1688836207155, "stop": 1688836207707}], "attachments": [{"name": "log", "source": "9654e1c1-a765-4993-addd-93911ac56156-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "a96314ce-0ef9-4ece-ace2-1e23ad873252-attachment.txt", "type": "text/plain"}], "start": 1688836058514, "stop": 1688836207723, "uuid": "ab0394f1-cdea-4944-9693-3bae0da5a486", "historyId": "b0336c530c443842ce6471649281d16f", "testCaseId": "52ed46f92fc8742b817ccd38918a09bf", "fullName": "tests.test_openPowerBI.TestPowerBIReport#test_report", "labels": [{"name": "tag", "value": "smoke"}, {"name": "tag", "value": "@pytest.mark.usefixtures('get_driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_openPowerBI"}, {"name": "subSuite", "value": "TestPowerBIReport"}, {"name": "host", "value": "TIGER03699"}, {"name": "thread", "value": "9088-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_openPowerBI"}]}